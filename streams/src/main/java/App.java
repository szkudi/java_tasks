import com.sun.xml.internal.ws.util.StreamUtils;
import jdk.nashorn.internal.objects.annotations.Function;

import java.io.IOException;
import java.lang.reflect.Array;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.IntSummaryStatistics;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    private static final long a = 25214903917L;
    private static final long c = 11;
    private static final long m = 248;

    private static final String LOREM = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed dignissim metus porttitor justo commodo, non gravida nunc tempor. Donec ac erat et erat vestibulum posuere. Vivamus sed faucibus elit, vitae dignissim tellus. Maecenas mi ligula, semper sed cursus a, finibus sed massa. Curabitur ligula tellus, hendrerit id bibendum eu, fringilla eu nisi. Fusce tincidunt dictum urna mattis eleifend. Ut non diam tempor, ullamcorper justo quis, dapibus turpis. Suspendisse potenti. Pellentesque porttitor elit ac nisl tincidunt, cursus luctus tortor rutrum. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec mollis est vel dui molestie, ut vehicula metus lacinia. Integer aliquam tortor et odio vulputate, vel faucibus tellus maximus. Morbi rutrum fringilla nulla sit amet posuere. Suspendisse interdum convallis sem, bibendum pellentesque mi pharetra a.";

    public void findFitfthWord() {
        Arrays.stream(LOREM.split(" ")).filter(s -> {
            return s.length() > 10;
        }).limit(5).forEach(System.out::println);
    }

    public void wordsCounting() {
        Stream<String> stream = Arrays.stream(LOREM.split(" "));
        long start = System.currentTimeMillis();
        Map<Integer, Long> wordCounts = stream.filter(s -> s.length() > 12)
              .collect(Collectors.groupingBy(String::length, Collectors.counting()));
        long stop = System.currentTimeMillis();
        System.out.println("How long does it take: " + (stop - start));
    }

    public void parallelWordsCounting() {
        Stream<String> stream = Arrays.stream(LOREM.split(" "));
        long start = System.currentTimeMillis();
        Map<Integer, Long> wordCounts = stream.filter(s -> s.length() > 12)
                                              .collect(Collectors.groupingByConcurrent(String::length, Collectors.counting()));
        long stop = System.currentTimeMillis();
        System.out.println("How long does it take: " + (stop - start));
    }

    public void ex3() {
        int[] wartosci = { 1, 4, 9, 16 };
        Stream<int[]> stream1 = Stream.of(wartosci);
        IntStream stream2 = stream1.flatMapToInt(ints -> Arrays.stream(ints));
        IntStream stream3 = Arrays.stream(wartosci);
    }

    private long getNextRandom( long prev ) {
        return (a*prev + c)%m;
    }

    public Stream<Long> getRandomNumberStream() {
        return Stream.iterate(12345L, this::getNextRandom);
    }

    public String getGreeting() {
        return "Hello world.";
    }

    private Stream<String> punktyKodowe(String s){
//        List<String> wynik = new ArrayList<>();
//
//        int i = 0;
//        while (i < s.length()) {
//            int j = s.offsetByCodePoints(i, 1);
//            wynik.add(s.substring(i,j));
//            i = j;
//        }
//        return wynik.stream();

//        return IntStream.iterate(0, v -> v++).limit(s.length()).mapToObj(v -> s.substring(v, v + 1));
        return s.codePoints().mapToObj(value -> String.valueOf((char) value));
    }

    public boolean isValidWord(String s) {
        return s.codePoints().allMatch(Character::isAlphabetic);
    }

    public void hundredFirstWords() {
        try {
            System.out.println("First 100 words");
            String text = Files.readAllLines(Paths.get("/Users/mrszkudi/workspace/Java/streams/src/main/java","input.txt"), Charset.defaultCharset()).stream().collect(Collectors.joining());
            Arrays.stream(text.split("\\PL+")).filter(this::isValidWord).limit(100).forEach(System.out::println);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void tenMostCommonWords() {
        try {
            System.out.println("10 most common words");
            String text = Files.readAllLines(Paths.get("/Users/mrszkudi/workspace/Java/streams/src/main/java","input.txt"), Charset.defaultCharset()).stream().collect(Collectors.joining());
            Arrays.stream(text.split("\\PL+")).filter(this::isValidWord)
                .collect(Collectors.groupingBy(String::toLowerCase, Collectors.counting()))
                .entrySet().stream().sorted(Comparator.comparing(Entry::getValue))
                  .limit(10).map(stringLongEntry -> stringLongEntry.getKey()).forEach(System.out::println);
            System.out.println("CoÅ›");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void wordsWith5DifferentLetters() {
        System.out.println("Words with at least 5 different letters");
        try {
            Files.readAllLines(Paths.get("/usr/share/dict", "words")).stream()
                 .filter(s -> punktyKodowe(s).map(String::toLowerCase).distinct().count() > 5).forEach(System.out::println);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void averageLength() {
        System.out.println("Mean length");
        try {
            IntSummaryStatistics statistics =
                    Files.readAllLines(Paths.get("/usr/share/dict", "words")).stream()
                         .collect(Collectors.summarizingInt(String::length));
            System.out.println(statistics.getAverage());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void longestWords() {
        System.out.println("Longest Words");
        try {
            Files.readAllLines(Paths.get("/usr/share/dict", "words")).stream()
                 .collect(Collectors.groupingBy(String::length)).entrySet().stream()
                 .sorted((o1, o2) -> o2.getKey().compareTo(o1.getKey()))
                 .findFirst()
                 .ifPresent(integerListEntry -> integerListEntry.getValue().stream()
                                                                .forEach(System.out::println));


        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public <T> Stream<T> zip(Stream<T> first, Stream<T> second) {
        Iterator<T> it1 = first.iterator();
        Iterator<T> it2 = second.iterator();

        Stream<T> result = Stream.empty();

        while( it1.hasNext() || it2.hasNext()) {
            result = Stream.concat(
                    Stream.concat(result, Stream.of(it1.hasNext() ? it1.next() : null )),
                    Stream.of(it2.hasNext() ? it2.next() : null ));
        }

        return result;
    }

    public void flatMap() {
        System.out.println("Different versions of reduce");
        try {
            List<ArrayList<String>> source = Files.readAllLines(Paths.get("/Users/mrszkudi/workspace/Java/streams/src/main/java","input.txt"), Charset.defaultCharset()).stream()
                 .map(s -> Arrays.stream(s.split("\\PL+")).collect(Collectors.toCollection(ArrayList::new))).collect(Collectors.toList());

            System.out.println("Version 1");

            source.stream().reduce((strings, strings2) -> {
                strings.addAll(strings2);
                return strings;
            }).ifPresent(strings -> strings.stream().forEach(System.out::println));

            System.out.println("Version 2");

            source.stream().reduce(new ArrayList<String>(), (strings, strings2) -> {
                strings.addAll(strings2);
                return strings;
            }).stream().forEach(System.out::println);

            System.out.println("Version 3");

//            source.parallelStream().reduce(new ArrayList<String>(), (strings, strings2) -> {
//                strings.addAll(strings2);
//                return strings;
//            },(strings, strings2) -> {
//                strings.addAll(strings2);
//                return strings;
//            }).stream().forEach(System.out::println);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }




    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        App a = new App();
        a.findFitfthWord();
        a.wordsCounting();
        a.parallelWordsCounting();
        a.getRandomNumberStream().limit(10).forEach( System.out::println );
        System.out.println();
        a.hundredFirstWords();
        System.out.println();
        a.tenMostCommonWords();
        System.out.println();
        a.wordsWith5DifferentLetters();
        System.out.println();
        a.averageLength();
        System.out.println();
        a.longestWords();
        System.out.println();
        a.zip(Stream.of("A", "B"), Stream.of("C", "D", "E")).forEach(System.out::println);
        System.out.println();
        a.flatMap();

    }
}
